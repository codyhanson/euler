package main

/*
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
import (
	"fmt"
)

func countDivisors(n int) int {
	divCount := 2
	i := 2

	for i < n/2 {
		if n%i == 0 {
			//found a divisor
			divCount++
		}
		i++
	}
	return divCount
}

func main() {
	nextTriangle := 3
	nextAdd := 4
	curCount := 0
	curMax := 0
	for curCount < 500 {
		nextTriangle += nextAdd
		nextAdd++
		curCount = countDivisors(nextTriangle)
		if curCount > curMax {
			fmt.Printf("%d:%d\n", nextTriangle, curCount)
			curMax = curCount
		}
	}
	fmt.Println(nextTriangle)
}
